{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  addedProducts: []\n};\nconst addToBasketSlice = createSlice({\n  name: \"addToBasket\",\n  initialState,\n  reducers: {\n    addToBasket: (state, action) => {\n      const existingProduct = state.addedProducts.find(product => product.id === action.payload.id);\n      if (existingProduct) {\n        existingProduct.quantity += 1;\n        existingProduct.isSelected = false;\n      } else {\n        state.addedProducts.push({\n          ...action.payload,\n          quantity: 1,\n          isSelected: false\n        });\n      }\n    },\n    removeFromBasket: (state, action) => {\n      const existingProduct = state.addedProducts.find(product => product.id === action.payload);\n      if (existingProduct) {\n        existingProduct.quantity = Math.max(existingProduct.quantity - 1, 0);\n      }\n      state.addedProducts = state.addedProducts.filter(product => product.quantity > 0);\n    },\n    toggleProductSelection: (state, action) => {\n      const product = state.addedProducts.find(product => product.id === action.payload);\n      if (product) {\n        product.isSelected = !product.isSelected;\n      }\n    },\n    removeProductFromBasket: (state, action) => {\n      state.addedProducts = state.addedProducts.filter(product => product.id !== action.payload);\n    },\n    selectAllProducts: state => {\n      state.addedProducts.forEach(product => {\n        product.isSelected = true;\n      });\n    },\n    removeSelectedProducts: state => {\n      state.addedProducts = state.addedProducts.filter(product => !product.isSelected);\n    },\n    toggleSelectAllProducts: state => {\n      state.addedProducts.forEach(product => {\n        product.isSelected = !product.isSelected;\n      });\n    },\n    resetAddedProductsSlice: state => {\n      state.addedProducts = [];\n    },\n    removeAllSelectedProducts: state => {\n      state.addedProducts = state.addedProducts.filter(product => !product.isSelected);\n    }\n  }\n});\nexport const {\n  addToBasket,\n  removeFromBasket,\n  toggleProductSelection,\n  removeProductFromBasket,\n  selectAllProducts,\n  removeSelectedProducts,\n  toggleSelectAllProducts,\n  resetAddedProductsSlice,\n  removeAllSelectedProducts\n} = addToBasketSlice.actions;\nexport default addToBasketSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","addedProducts","addToBasketSlice","name","reducers","addToBasket","state","action","existingProduct","find","product","id","payload","quantity","isSelected","push","removeFromBasket","Math","max","filter","toggleProductSelection","removeProductFromBasket","selectAllProducts","forEach","removeSelectedProducts","toggleSelectAllProducts","resetAddedProductsSlice","removeAllSelectedProducts","actions","reducer"],"sources":["C:/Users/HP/Desktop/E-commerce/bootstrap-react-redux-tkt/src/ReduxToolkit/addToBasketReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  addedProducts: [],\r\n};\r\n\r\nconst addToBasketSlice = createSlice({\r\n  name: \"addToBasket\",\r\n  initialState,\r\n  reducers: {\r\n    addToBasket: (state, action) => {\r\n      const existingProduct = state.addedProducts.find(\r\n        (product) => product.id === action.payload.id\r\n      );\r\n\r\n      if (existingProduct) {\r\n        existingProduct.quantity += 1;\r\n        existingProduct.isSelected = false;\r\n      } else {\r\n        state.addedProducts.push({\r\n          ...action.payload,\r\n          quantity: 1,\r\n          isSelected: false,\r\n        });\r\n      }\r\n    },\r\n    removeFromBasket: (state, action) => {\r\n      const existingProduct = state.addedProducts.find(\r\n        (product) => product.id === action.payload\r\n      );\r\n\r\n      if (existingProduct) {\r\n        existingProduct.quantity = Math.max(existingProduct.quantity - 1, 0);\r\n      }\r\n      state.addedProducts = state.addedProducts.filter(\r\n        (product) => product.quantity > 0\r\n      );\r\n    },\r\n    toggleProductSelection: (state, action) => {\r\n      const product = state.addedProducts.find(\r\n        (product) => product.id === action.payload\r\n      );\r\n      if (product) {\r\n        product.isSelected = !product.isSelected;\r\n      }\r\n    },\r\n    removeProductFromBasket: (state, action) => {\r\n      state.addedProducts = state.addedProducts.filter(\r\n        (product) => product.id !== action.payload\r\n      );\r\n    },\r\n    selectAllProducts: (state) => {\r\n      state.addedProducts.forEach((product) => {\r\n        product.isSelected = true;\r\n      });\r\n    },\r\n    removeSelectedProducts: (state) => {\r\n      state.addedProducts = state.addedProducts.filter(\r\n        (product) => !product.isSelected\r\n      );\r\n    },\r\n    toggleSelectAllProducts: (state) => {\r\n      state.addedProducts.forEach((product) => {\r\n        product.isSelected = !product.isSelected;\r\n      });\r\n    },\r\n    resetAddedProductsSlice: (state) => {\r\n      state.addedProducts = [];\r\n    },\r\n    removeAllSelectedProducts: (state) => {\r\n      state.addedProducts = state.addedProducts.filter(\r\n        (product) => !product.isSelected\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addToBasket,\r\n  removeFromBasket,\r\n  toggleProductSelection,\r\n  removeProductFromBasket,\r\n  selectAllProducts,\r\n  removeSelectedProducts,\r\n  toggleSelectAllProducts,\r\n  resetAddedProductsSlice,\r\n  removeAllSelectedProducts\r\n} = addToBasketSlice.actions;\r\n\r\nexport default addToBasketSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}